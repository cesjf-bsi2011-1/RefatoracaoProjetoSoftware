package com.aluguelautomoveis.controllerview;

import com.aluguelautomoveis.model.ClienteBean;
import javax.swing.JOptionPane;
import com.aluguelautomoveis.model.Utils;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
import com.aluguelautomoveis.model.dao.ClienteDao;

/**
 *
 * @author Locadora de Veículo
 */
public class FormCadastroCliente extends javax.swing.JFrame {

    ClienteBean cliente = null;
    String okcliente = null;

    /**
     * Creates new form CadastroCliente
     */
    public FormCadastroCliente() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        textFieldNomeCliente = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        textFormattedDataNascimento = new javax.swing.JFormattedTextField();
        jLabel4 = new javax.swing.JLabel();
        textFieldSexo = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        textFormattedCPF = new javax.swing.JFormattedTextField();
        jLabel6 = new javax.swing.JLabel();
        textFormattedTelefone = new javax.swing.JFormattedTextField();
        jLabel7 = new javax.swing.JLabel();
        textFormatedCelular = new javax.swing.JFormattedTextField();
        jLabel9 = new javax.swing.JLabel();
        textFieldEmail = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        textFieldCNH = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        comboBoxTipo = new javax.swing.JComboBox();
        textFieldCodigoCliente = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        textFieldLogradouro = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        textFieldNumero = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        textFieldComplemento = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        textFieldBairro = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        textFieldCidade = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        textFormattedCEP = new javax.swing.JFormattedTextField();
        jLabel18 = new javax.swing.JLabel();
        jcestado = new javax.swing.JComboBox();
        buttonInserirCliente = new javax.swing.JButton();
        buttonExcluirCliente = new javax.swing.JButton();
        buttonAtualizarCliente = new javax.swing.JButton();
        buttonSair = new javax.swing.JButton();
        buttonCliente = new javax.swing.JButton();
        checkBoxBusca = new javax.swing.JCheckBox();
        textFormattedCPFBusca = new javax.swing.JFormattedTextField();
        buttonBuscarPorCPF = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableClientes = new javax.swing.JTable();
        buttonBuscarTodosClientes = new javax.swing.JButton();
        buttonEditarClienteTable = new javax.swing.JButton();
        buttonRelatotorioCliente = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(800, 700));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Cadastro Cliente"));

        jLabel1.setText("Nome Completo:");

        textFieldNomeCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textFieldNomeClienteActionPerformed(evt);
            }
        });

        jLabel2.setText("Data de Nasc.");

        jLabel3.setText("Código:");

        try {
            textFormattedDataNascimento.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        textFormattedDataNascimento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textFormattedDataNascimentoActionPerformed(evt);
            }
        });

        jLabel4.setText("Sexo:");

        textFieldSexo.setMaximumRowCount(3);
        textFieldSexo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Feminino", "Masculino", " " }));
        textFieldSexo.setSelectedIndex(-1);

        jLabel5.setText("CPF:");

        try {
            textFormattedCPF.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("###.###.###-##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        jLabel6.setText("Telefone:");

        try {
            textFormattedTelefone.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("(##) ####-####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        jLabel7.setText("Celular:");

        try {
            textFormatedCelular.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("(##) ####-####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        jLabel9.setText("Email:");

        jLabel10.setText("CNH:");

        jLabel11.setText("Tipo:");

        comboBoxTipo.setMaximumRowCount(6);
        comboBoxTipo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "A", "B", "C", "D", "E", " " }));
        comboBoxTipo.setSelectedIndex(-1);

        textFieldCodigoCliente.setEnabled(false);

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel3)
                            .add(jPanel1Layout.createSequentialGroup()
                                .add(1, 1, 1)
                                .add(textFieldCodigoCliente, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 66, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(textFieldNomeCliente, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 330, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jLabel1))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 90, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(textFormattedDataNascimento)))
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(1, 1, 1)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jPanel1Layout.createSequentialGroup()
                                .add(2, 2, 2)
                                .add(textFormattedTelefone, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 103, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(textFormatedCelular, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 104, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(18, 18, 18)
                                .add(textFieldEmail, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 169, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(jPanel1Layout.createSequentialGroup()
                                .add(jLabel6)
                                .add(59, 59, 59)
                                .add(jLabel7)
                                .add(102, 102, 102)
                                .add(jLabel9)))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel10)
                            .add(textFieldCNH, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 123, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 14, Short.MAX_VALUE)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel11)
                    .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                        .add(comboBoxTipo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 71, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel4)
                            .add(textFieldSexo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 18, Short.MAX_VALUE)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(textFormattedCPF, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 123, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel5))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(jPanel1Layout.createSequentialGroup()
                                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                    .add(jLabel2)
                                    .add(jLabel3)
                                    .add(jLabel1))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                    .add(textFieldNomeCliente, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(textFormattedDataNascimento, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(textFieldCodigoCliente, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                            .add(jPanel1Layout.createSequentialGroup()
                                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                                    .add(jLabel5)
                                    .add(jLabel4))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                    .add(textFormattedCPF, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(textFieldSexo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel6)
                            .add(jLabel7)
                            .add(jLabel9)
                            .add(jLabel10))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(textFormattedTelefone, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(textFormatedCelular, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(textFieldEmail, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(textFieldCNH, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jLabel11)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(comboBoxTipo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .add(0, 14, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Cadastro Endereço"));

        jLabel12.setText("Rua/Av.");

        jLabel13.setText("Num.");

        jLabel14.setText("Compl.");

        jLabel15.setText("Bairro");

        jLabel16.setText("Cidade");

        textFieldCidade.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textFieldCidadeActionPerformed(evt);
            }
        });

        jLabel17.setText("CEP");

        try {
            textFormattedCEP.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##.###-###")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        jLabel18.setText("UF");

        jcestado.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Acre", "Alagoas", "Amapá", "Amazonas", "Bahia", "Ceará", "Distrito Federal", "Espírito Santo", "Goiás", "Maranhão", "Mato Grosso", "Mato Grosso do Sul", "Minas Gerais", "Paraná", "Paraíba", "Pará", "Pernambuco", "Piauí", "Rio de Janeiro", "Rio Grande do Norte", "Rio Grande do Sul", "Rondonia", "Roraima", "Santa Catarina", "Sergipe", "São Paulo", "Tocantins" }));
        jcestado.setSelectedIndex(-1);

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel2Layout.createSequentialGroup()
                        .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel12)
                            .add(jLabel15)
                            .add(textFieldBairro))
                        .add(18, 18, 18)
                        .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(textFieldCidade, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 152, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jLabel16))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(textFormattedCEP, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 94, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jLabel17))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel18)
                            .add(jcestado, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                    .add(jPanel2Layout.createSequentialGroup()
                        .add(textFieldLogradouro)
                        .add(18, 18, 18)
                        .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(textFieldNumero, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 59, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jLabel13))
                        .add(18, 18, 18)
                        .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(textFieldComplemento, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 52, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jLabel14))))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel12)
                    .add(jLabel13)
                    .add(jLabel14))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(textFieldLogradouro, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(textFieldNumero, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(textFieldComplemento, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel15)
                    .add(jLabel16)
                    .add(jLabel17)
                    .add(jLabel18))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(textFieldBairro, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(textFieldCidade, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(textFormattedCEP, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jcestado, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
        );

        buttonInserirCliente.setText("Inserir Cliente");
        buttonInserirCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonInserirClienteActionPerformed(evt);
            }
        });

        buttonExcluirCliente.setText("Excluir Cliente");
        buttonExcluirCliente.setEnabled(false);
        buttonExcluirCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonExcluirClienteActionPerformed(evt);
            }
        });

        buttonAtualizarCliente.setText("Atualizar Cliente");
        buttonAtualizarCliente.setEnabled(false);
        buttonAtualizarCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAtualizarClienteActionPerformed(evt);
            }
        });

        buttonSair.setText("Sair");
        buttonSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSairActionPerformed(evt);
            }
        });

        buttonCliente.setText("Limpar Cliente");
        buttonCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonClienteActionPerformed(evt);
            }
        });

        checkBoxBusca.setText("Buscar Cliente");
        checkBoxBusca.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxBuscaActionPerformed(evt);
            }
        });

        try {
            textFormattedCPFBusca.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("###.###.###-##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        textFormattedCPFBusca.setEnabled(false);

        buttonBuscarPorCPF.setText("Buscar");
        buttonBuscarPorCPF.setEnabled(false);
        buttonBuscarPorCPF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonBuscarPorCPFActionPerformed(evt);
            }
        });

        tableClientes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Código", "Nome", "Cpf", "Habilitação", "Tipo", "Telefone"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableClientes.getTableHeader().setReorderingAllowed(false);
        tableClientes.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableClientesMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tableClientes);
        if (tableClientes.getColumnModel().getColumnCount() > 0) {
            tableClientes.getColumnModel().getColumn(0).setResizable(false);
            tableClientes.getColumnModel().getColumn(1).setResizable(false);
            tableClientes.getColumnModel().getColumn(2).setResizable(false);
            tableClientes.getColumnModel().getColumn(3).setResizable(false);
            tableClientes.getColumnModel().getColumn(4).setResizable(false);
            tableClientes.getColumnModel().getColumn(5).setResizable(false);
        }

        buttonBuscarTodosClientes.setText("Buscar Todos");
        buttonBuscarTodosClientes.setEnabled(false);
        buttonBuscarTodosClientes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonBuscarTodosClientesActionPerformed(evt);
            }
        });

        buttonEditarClienteTable.setText("Editar Cliente");
        buttonEditarClienteTable.setEnabled(false);
        buttonEditarClienteTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonEditarClienteTableActionPerformed(evt);
            }
        });

        buttonRelatotorioCliente.setText("Relatório");
        buttonRelatotorioCliente.setEnabled(false);
        buttonRelatotorioCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonRelatotorioClienteActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(checkBoxBusca)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(textFormattedCPFBusca, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 115, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(buttonBuscarPorCPF, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 94, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(buttonBuscarTodosClientes)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(buttonEditarClienteTable, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 102, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(0, 0, Short.MAX_VALUE))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(jPanel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(layout.createSequentialGroup()
                        .add(buttonInserirCliente)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(buttonExcluirCliente)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(buttonAtualizarCliente)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(buttonRelatotorioCliente, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 129, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(buttonCliente)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(buttonSair, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 81, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jScrollPane1))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(checkBoxBusca)
                    .add(textFormattedCPFBusca, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(buttonBuscarPorCPF)
                    .add(buttonBuscarTodosClientes)
                    .add(buttonEditarClienteTable))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 388, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(buttonSair)
                    .add(buttonCliente)
                    .add(buttonInserirCliente)
                    .add(buttonExcluirCliente)
                    .add(buttonAtualizarCliente)
                    .add(buttonRelatotorioCliente))
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void textFieldNomeClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textFieldNomeClienteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textFieldNomeClienteActionPerformed

    private void textFormattedDataNascimentoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textFormattedDataNascimentoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textFormattedDataNascimentoActionPerformed

    private void buttonSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSairActionPerformed
        this.dispose();
    }//GEN-LAST:event_buttonSairActionPerformed

    private void buttonBuscarPorCPFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonBuscarPorCPFActionPerformed
        limparTabelaCliente();
        cliente = ClienteDao.getCliente(textFormattedCPFBusca.getText());

        DefaultTableModel modelo = (DefaultTableModel) tableClientes.getModel();
        if (cliente != null) {
            modelo.addRow(cliente.getCliente());
            textFormattedCPFBusca.setText(null);
        } else {
            JOptionPane.showMessageDialog(null, "Cliente Inexistente!\nNão foi possivel encontrar o Cliente especificado!", "ATENÇÃO!", JOptionPane.ERROR_MESSAGE);
        }
        textFormattedCPFBusca.setText(null);


    }//GEN-LAST:event_buttonBuscarPorCPFActionPerformed

    private void buttonInserirClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonInserirClienteActionPerformed
        if (checacampos(null) == true) {
            double numercliente = Math.round(Math.random() * 1000);
            double random = checanumerocliente(numercliente);
            textFieldCodigoCliente.setText(Double.toString(random));
            ClienteBean cliente = new ClienteBean();
            cliente.setCodigo(textFieldCodigoCliente.getText());
            cliente.setNome(textFieldNomeCliente.getText());
            cliente.setCpf(textFormattedCPF.getText());
            cliente.setRua(textFieldLogradouro.getText());
            cliente.setCelular(textFormatedCelular.getText());
            try {
                cliente.setDatanascimento(Utils.StrToDate(textFormattedDataNascimento.getText()));
            } catch (ParseException ex) {
                Logger.getLogger(FormCadastroCliente.class.getName()).log(Level.SEVERE, null, ex);
            }
            cliente.setNumero(textFieldNumero.getText());
            cliente.setComplemento(textFieldComplemento.getText());
            cliente.setBairro(textFieldBairro.getText());
            cliente.setCidade(textFieldCidade.getText());
            cliente.setEstado(jcestado.getSelectedItem().toString());
            cliente.setCep(textFormattedCEP.getText());
            cliente.setTelefone(textFormattedTelefone.getText());
            cliente.setEmail(textFieldEmail.getText());
            cliente.setHabilitacao(textFieldCNH.getText());
            cliente.setTipo(comboBoxTipo.getSelectedItem().toString());
            cliente.setSexo(textFieldSexo.getSelectedItem().toString());

            if (ClienteDao.getCliente(cliente.getCpf()) == null) {

                ClienteDao.addCliente(cliente);
                JOptionPane.showMessageDialog(null, "Cliente Cadastrado com Sucesso!");

                limpacampos();
            } else {
                JOptionPane.showMessageDialog(null, "Já existe Cliente Cadastrado com este CPF!!!");
            }
        }


    }//GEN-LAST:event_buttonInserirClienteActionPerformed

    private void checkBoxBuscaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxBuscaActionPerformed
        limpacampos();
        limparTabelaCliente();
        if (checkBoxBusca.isSelected()) {
            buttonBuscarPorCPF.setEnabled(true);
            buttonExcluirCliente.setEnabled(false);
            buttonAtualizarCliente.setEnabled(false);
            buttonInserirCliente.setEnabled(false);
            textFormattedCPFBusca.setEnabled(true);
            buttonBuscarTodosClientes.setEnabled(true);
            textFieldNomeCliente.setEnabled(false);
            textFormattedCPF.setEnabled(false);
            textFieldLogradouro.setEnabled(false);
            textFieldNumero.setEnabled(false);
            textFieldComplemento.setEnabled(false);
            textFieldBairro.setEnabled(false);
            textFieldCidade.setEnabled(false);
            jcestado.setEnabled(false);
            textFormattedCEP.setEnabled(false);
            textFormattedTelefone.setEnabled(false);
            textFieldEmail.setEnabled(false);
            textFieldCNH.setEnabled(false);
            comboBoxTipo.setEnabled(false);
            textFormattedDataNascimento.setEnabled(false);
            textFieldSexo.setEnabled(false);
            textFormatedCelular.setEnabled(false);
        } else {

            {
                buttonEditarClienteTable.setEnabled(false);
                buttonInserirCliente.setEnabled(true);
                buttonExcluirCliente.setEnabled(false);
                buttonAtualizarCliente.setEnabled(false);
                buttonBuscarPorCPF.setEnabled(false);
                textFormattedCPFBusca.setEnabled(false);
                buttonBuscarTodosClientes.setEnabled(false);
                textFieldNomeCliente.setEnabled(true);
                textFormattedCPF.setEnabled(true);
                textFieldLogradouro.setEnabled(true);
                textFieldNumero.setEnabled(true);
                textFieldComplemento.setEnabled(true);
                textFieldBairro.setEnabled(true);
                textFieldCidade.setEnabled(true);
                jcestado.setEnabled(true);
                textFormattedCEP.setEnabled(true);
                textFormattedTelefone.setEnabled(true);
                textFieldEmail.setEnabled(true);
                textFieldCNH.setEnabled(true);
                comboBoxTipo.setEnabled(true);
                textFormattedDataNascimento.setEnabled(true);
                textFieldSexo.setEnabled(true);
                textFormatedCelular.setEnabled(true);
            }
        }
    }//GEN-LAST:event_checkBoxBuscaActionPerformed

    private void buttonExcluirClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonExcluirClienteActionPerformed
        String cpf = textFormattedCPF.getText();
        if (ClienteDao.getCliente(cpf) != null) {

            int resposta = JOptionPane.showConfirmDialog(null, "Tem certeza que deseja remover este cliente?", "Remover", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
            if (resposta == 0) {
                ClienteDao.removerCliente(cpf);
                JOptionPane.showMessageDialog(null, "O cliente foi removido com sucesso!!!");
                checkBoxBusca.setSelected(false);
                buttonEditarClienteTable.setEnabled(false);
                buttonExcluirCliente.setEnabled(false);
                buttonAtualizarCliente.setEnabled(false);
                buttonInserirCliente.setEnabled(true);
                limparTabelaCliente();
                limpacampos();
            } else {
                JOptionPane.showMessageDialog(null, "O cliente não foi removido.");
            }
        }
    }//GEN-LAST:event_buttonExcluirClienteActionPerformed

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated

    }//GEN-LAST:event_formWindowActivated

    private void buttonClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonClienteActionPerformed
        limpacampos();
        limparTabelaCliente();
        buttonAtualizarCliente.setEnabled(false);
        buttonExcluirCliente.setEnabled(false);
        buttonInserirCliente.setEnabled(true);
        checkBoxBusca.setSelected(false);
        buttonEditarClienteTable.setEnabled(false);
        buttonInserirCliente.setEnabled(true);
        buttonExcluirCliente.setEnabled(false);
        buttonAtualizarCliente.setEnabled(false);
        buttonBuscarPorCPF.setEnabled(false);
        textFormattedCPFBusca.setEnabled(false);
        buttonBuscarTodosClientes.setEnabled(false);
        textFieldNomeCliente.setEnabled(true);
        textFormattedCPF.setEnabled(true);
        textFieldLogradouro.setEnabled(true);
        textFieldNumero.setEnabled(true);
        textFieldComplemento.setEnabled(true);
        textFieldBairro.setEnabled(true);
        textFieldCidade.setEnabled(true);
        jcestado.setEnabled(true);
        textFormattedCEP.setEnabled(true);
        textFormattedTelefone.setEnabled(true);
        textFieldEmail.setEnabled(true);
        textFieldCNH.setEnabled(true);
        comboBoxTipo.setEnabled(true);
        textFormattedDataNascimento.setEnabled(true);
        textFieldSexo.setEnabled(true);
        textFormatedCelular.setEnabled(true);

    }//GEN-LAST:event_buttonClienteActionPerformed

    private void buttonBuscarTodosClientesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonBuscarTodosClientesActionPerformed
        textFormattedCPFBusca.setText("");
        limparTabelaCliente();

        ArrayList<ClienteBean> lista = ClienteDao.getTodosClientes();

        DefaultTableModel modelo = (DefaultTableModel) tableClientes.getModel();

        if (!lista.isEmpty()) {

            for (int i = 0; i < lista.size(); i++) {

                modelo.addRow(lista.get(i).getCliente());

            }
        } else {
            JOptionPane.showMessageDialog(null, "Nenhum Cliente cadastrado!", "ATENÇÃO!", JOptionPane.ERROR_MESSAGE);
        }


    }//GEN-LAST:event_buttonBuscarTodosClientesActionPerformed

    private void tableClientesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableClientesMouseClicked
        if (okcliente != "ok") {
            if (tableClientes.getSelectedRow() >= -1) {
                buttonEditarClienteTable.setEnabled(true);
                buttonRelatotorioCliente.setEnabled(true);
                buttonAtualizarCliente.setEnabled(false);
                buttonExcluirCliente.setEnabled(false);
                buttonBuscarPorCPF.setEnabled(false);
                buttonBuscarTodosClientes.setEnabled(false);
            } else {

            }
        }
    }//GEN-LAST:event_tableClientesMouseClicked

    private void buttonEditarClienteTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonEditarClienteTableActionPerformed
        int linha = tableClientes.getSelectedRow();
        String cpf = ((String) tableClientes.getModel().getValueAt(linha, 2));
        cliente = ClienteDao.getCliente(cpf);
        textFieldCodigoCliente.setText(cliente.getCodigo());
        textFieldNomeCliente.setText(cliente.getNome());
        textFormattedCPF.setText(cliente.getCpf());
        textFieldLogradouro.setText(cliente.getRua());
        textFieldNumero.setText(cliente.getNumero());
        textFieldComplemento.setText(cliente.getComplemento());
        textFieldBairro.setText(cliente.getBairro());
        textFieldCidade.setText(cliente.getCidade());
        jcestado.setSelectedItem(cliente.getEstado());
        textFormattedCEP.setText(cliente.getCep());
        textFormattedTelefone.setValue(cliente.getTelefone());
        textFieldEmail.setText(cliente.getEmail());
        textFieldCNH.setText(cliente.getHabilitacao());
        comboBoxTipo.setSelectedItem(cliente.getTipo());
        textFormattedDataNascimento.setText(Utils.DateToStr(cliente.getDatanascimento()));
        textFieldSexo.setSelectedItem(cliente.getSexo());
        textFormatedCelular.setText(cliente.getCelular());
        textFieldNomeCliente.setEnabled(true);
        textFormattedCPF.setEnabled(true);
        textFieldLogradouro.setEnabled(true);
        textFieldNumero.setEnabled(true);
        textFieldComplemento.setEnabled(true);
        textFieldBairro.setEnabled(true);
        textFieldCidade.setEnabled(true);
        jcestado.setEnabled(true);
        textFormattedCEP.setEnabled(true);
        textFormattedTelefone.setEnabled(true);
        textFieldEmail.setEnabled(true);
        textFieldCNH.setEnabled(true);
        comboBoxTipo.setEnabled(true);
        textFormattedDataNascimento.setEnabled(true);
        textFieldSexo.setEnabled(true);
        textFormatedCelular.setEnabled(true);
        checkBoxBusca.setSelected(false);
        limparTabelaCliente();
        buttonEditarClienteTable.setEnabled(false);
        buttonExcluirCliente.setEnabled(true);
        buttonAtualizarCliente.setEnabled(true);
    }//GEN-LAST:event_buttonEditarClienteTableActionPerformed

    private void buttonAtualizarClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAtualizarClienteActionPerformed
        limparTabelaCliente();
        if (checacampos(null) == true) {
            ClienteBean cliente = new ClienteBean();
            cliente.setCodigo(textFieldCodigoCliente.getText());
            cliente.setNome(textFieldNomeCliente.getText());
            cliente.setCpf(textFormattedCPF.getText());
            cliente.setRua(textFieldLogradouro.getText());
            cliente.setCelular(textFormatedCelular.getText());
            try {
                cliente.setDatanascimento(Utils.StrToDate(textFormattedDataNascimento.getText()));
            } catch (ParseException ex) {
                Logger.getLogger(FormCadastroCliente.class.getName()).log(Level.SEVERE, null, ex);
            }
            cliente.setNumero(textFieldNumero.getText());
            cliente.setComplemento(textFieldComplemento.getText());
            cliente.setBairro(textFieldBairro.getText());
            cliente.setCidade(textFieldCidade.getText());
            cliente.setEstado(jcestado.getSelectedItem().toString());
            cliente.setCep(textFormattedCEP.getText());
            cliente.setTelefone(textFormattedTelefone.getText());
            cliente.setEmail(textFieldEmail.getText());
            cliente.setHabilitacao(textFieldCNH.getText());
            cliente.setTipo(comboBoxTipo.getSelectedItem().toString());
            cliente.setSexo(textFieldSexo.getSelectedItem().toString());

            ClienteDao.atualizarCliente(cliente);
            JOptionPane.showMessageDialog(null, "Cliente Atualizado com Sucesso!");
            checkBoxBusca.setSelected(false);
            buttonEditarClienteTable.setEnabled(false);
            buttonExcluirCliente.setEnabled(false);
            buttonAtualizarCliente.setEnabled(false);
            buttonInserirCliente.setEnabled(true);
            limpacampos();

        }
    }//GEN-LAST:event_buttonAtualizarClienteActionPerformed

    private void buttonRelatotorioClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonRelatotorioClienteActionPerformed
        FormRelCliente frc = new FormRelCliente();
        frc.setVisible(true);
        int linha = tableClientes.getSelectedRow();
        String cpf = ((String) tableClientes.getModel().getValueAt(linha, 0));
        cliente = ClienteDao.getCliente(cpf);
        FormRelCliente.cliente = cliente;

    }//GEN-LAST:event_buttonRelatotorioClienteActionPerformed

    private void textFieldCidadeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textFieldCidadeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textFieldCidadeActionPerformed

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FormCadastroCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FormCadastroCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FormCadastroCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FormCadastroCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FormCadastroCliente().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonAtualizarCliente;
    private javax.swing.JButton buttonBuscarPorCPF;
    private javax.swing.JButton buttonBuscarTodosClientes;
    private javax.swing.JButton buttonCliente;
    private javax.swing.JButton buttonEditarClienteTable;
    private javax.swing.JButton buttonExcluirCliente;
    private javax.swing.JButton buttonInserirCliente;
    private javax.swing.JButton buttonRelatotorioCliente;
    private javax.swing.JButton buttonSair;
    private javax.swing.JCheckBox checkBoxBusca;
    private javax.swing.JComboBox comboBoxTipo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox jcestado;
    private javax.swing.JTable tableClientes;
    private javax.swing.JTextField textFieldBairro;
    private javax.swing.JTextField textFieldCNH;
    private javax.swing.JTextField textFieldCidade;
    private javax.swing.JTextField textFieldCodigoCliente;
    private javax.swing.JTextField textFieldComplemento;
    private javax.swing.JTextField textFieldEmail;
    private javax.swing.JTextField textFieldLogradouro;
    private javax.swing.JTextField textFieldNomeCliente;
    private javax.swing.JTextField textFieldNumero;
    private javax.swing.JComboBox textFieldSexo;
    private javax.swing.JFormattedTextField textFormatedCelular;
    private javax.swing.JFormattedTextField textFormattedCEP;
    private javax.swing.JFormattedTextField textFormattedCPF;
    private javax.swing.JFormattedTextField textFormattedCPFBusca;
    private javax.swing.JFormattedTextField textFormattedDataNascimento;
    private javax.swing.JFormattedTextField textFormattedTelefone;
    // End of variables declaration//GEN-END:variables

    public void limpacampos() {
        textFieldCodigoCliente.setText(null);
        textFieldNomeCliente.setText(null);
        textFormattedCPF.setText(null);
        textFieldLogradouro.setText(null);
        textFieldNumero.setText(null);
        textFieldComplemento.setText(null);
        textFieldBairro.setText(null);
        textFieldCidade.setText(null);
        jcestado.setSelectedItem(null);
        textFormattedCEP.setText(null);
        textFormattedTelefone.setValue(null);
        textFieldEmail.setText(null);
        textFieldCNH.setText(null);
        comboBoxTipo.setSelectedItem(null);
        textFormattedDataNascimento.setText(null);
        textFieldSexo.setSelectedItem(null);
        textFormatedCelular.setText(null);
    }

    public boolean checacampos(String str) {
        str = "";

        if (textFieldNomeCliente.getText().trim().isEmpty()) {
            str += "Nome\n";
        }

        if (textFormattedDataNascimento.getText().equals("  /  /    ")) {
            str += "Data de Nascimento\n";

        }

        if (textFieldSexo.getSelectedItem() == null) {
            str += "Sexo\n";

        }

        if (textFormattedCPF.getText().equals("   .   .   -  ")) {
            str += "CPF\n";
        }

        if (textFormattedTelefone.getText().equals("(  )     -    ")) {
            str += "Telefone\n";

        }
        if (textFieldEmail.getText().trim().isEmpty()) {
            str += "Email\n";

        }
        if (textFieldCNH.getText().trim().isEmpty()) {
            str += "CNH\n";

        }

        if (comboBoxTipo.getSelectedItem() == null) {
            str += "Tipo\n";

        }

        if (textFieldLogradouro.getText().trim().isEmpty()) {
            str += "Rua\n";
        }
        if (textFieldNumero.getText().trim().isEmpty()) {
            str += "Número\n";
        }

        if (textFieldBairro.getText().trim().isEmpty()) {
            str += "Bairro\n";
        }
        if (textFieldCidade.getText().trim().isEmpty()) {
            str += "Cidade\n";

        }

        if (textFormattedCEP.getText().equals("     -   ")) {
            str += "CEP\n";

        }

        if (jcestado.getSelectedItem() == null) {
            str += "Estado\n";

        }

        if (str == ("")) {
            return true;
        } else {

            JOptionPane.showMessageDialog(null, "Favor preencher os seguintes campos: \n" + str);
            return false;
        }

    }

    private void limparTabelaCliente() {
        DefaultTableModel modelo = (DefaultTableModel) tableClientes.getModel();
        for (int i = tableClientes.getRowCount() - 1; i >= 0; --i) {
            modelo.removeRow(i);
        }

    }

    public double checanumerocliente(double numercliente) {
        ArrayList<ClienteBean> lista = ClienteDao.getTodosClientes();

        if (!lista.isEmpty()) {
            for (int i = 0; i < lista.size(); i++) {
                double testenumero = Double.parseDouble(lista.get(i).getCodigo());
                while (testenumero == numercliente) {
                    numercliente += 1;

                }
            }
        }
        return numercliente;
    }

}
